"""
This module provides an online API for the Unimaus Simulator. This can be useful in cases where
we want to have other code interacting with the simulator online, and don't necessarily need to
store the generated data in a file.

For a simple example of usage, see __main__ code at the bottom of this module.

@author Dennis Soemers (only the online API: Luisa Zintgraf developed the original simulator)
"""

from simulator import parameters
from simulator.transactions_unimaus import UniMausTransactionModel
from simulator.customer_unimaus import GenuineCustomer, FraudulentCustomer


class OnlineUnimaus:

    def __init__(self, params=None):
        """
        Creates an object that can be used to run the simulator online / interactively. This means
        that we can have it generate a bit of data, do something with the data, generate a bit more
        data, do something again, etc. (as opposed to, generating one large batch of data, storing it
        in a file, and then using it in a different program).

        :param params:
            Parameters passed on to the UniMausTransactionModel. Will use the default parameters if None
        """
        if params == None:
            params = parameters.get_default_parameters()

        self.model = UniMausTransactionModel(params, GenuineCustomer, FraudulentCustomer)

    def get_log(self, clear_after=True):
        """
        Returns a log (in the form of a pandas dataframe) of the transactions generated so far.

        :param clear_after:
            If True, will clear the transactions from memory. This means that subsequent calls to get_log()
            will no longer include the transactions that have already been returned in a previous call.
        :return:
            The logged transactions
        """
        log = self.model.log_collector.get_agent_vars_dataframe()
        log.index = log.index.droplevel(1)

        if clear_after:
            agent_vars = self.model.log_collector.agent_vars
            for reporter_name in agent_vars:
                agent_vars[reporter_name] = []

        return log

    def step_simulator(self, num_steps=1):
        """
        Runs num_steps steps of the simulator (simulates num_steps hours of transactions)

        :param num_steps:
            The number of steps to run. 1 by default.
        :return:
            True if we successfully simulated a step, false otherwise
        """
        for step in range(num_steps):
            if self.model.terminated:
                print("WARNING: cannot step simulator because model is already terminated. ",
                      "Specify a later end_date in params to allow for a longer simulation.")
                return False

            self.model.step()
            return True

if __name__ == '__main__':
    # construct our online simulator
    simulator = OnlineUnimaus()

    # change this value to change how often we print logged transactions.
    # with n_steps = 1, we print after every hour of transactions.
    # with n_steps = 2 for example, we would only print every 2 steps
    n_steps = 1

    # if this is set to False, our simulator will not clear logged transactions after printing them.
    # This would mean that subsequent print statements would also re-print transactions that we've already seen earlier
    clear_logs_after_print = True

    # keep running until we fail (which will be after 1 year due to end_date in default parameters)
    while simulator.step_simulator(n_steps):
        # print the transactions generated by the last step
        print(simulator.get_log(clear_logs_after_print))
